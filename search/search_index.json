{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my Compose Kotlin Multiplatform Playground!","text":"<p>Pushing knowledge boundaries, one line of code at a time.</p> <p>This project is my playground for experimenting with new technologies, frameworks, and libraries. It's a space to learn, grow, and push knowledge boundaries, one line of code at a time.</p> <p>The playground is built on the JetBrains Compose Multiplatform Mobile template.</p> <p>Check out the website for more insights into the project:</p> <ul> <li> <p>Project Setup &amp; Getting Started</p> </li> <li> <p>Project Tooling and Resources</p> </li> </ul> <p>In the pipeline are some exciting project ideas like the APOD App, a Habit Tracker, a Limerick Generator with ChatGPT, and a Pok\u00e9dex App, along with an exploration of libraries and tools such as Ktor, Koin, SQLDelight, Coil, and Voyager for Compose Navigation.</p> <p>Join in the journey to learn more and push the boundaries of what's possible. Suggestions and project ideas are always welcome!</p> <p>Let's code, learn, and have fun!</p> <p>Happy Hacking!</p>"},{"location":"projects/","title":"Projects","text":"<p>There a no completed projects yet. But there are some ideas.</p>"},{"location":"setup/ios-config/","title":"iOS Configuration","text":"<p>Info</p> <p>This documentation is a copy of the Jetpack Compose Multiplatform documentation.</p>"},{"location":"setup/ios-config/#how-to-configure-the-ios-application","title":"How to configure the iOS application","text":"<p>To get a better understanding of this template's setup and learn how to configure the basic properties of your iOS app without Xcode, open the <code>iosApp/Configuration/Config.xcconfig</code> file in Android Studio. The configuration file contains:</p> <ul> <li><code>APP_NAME</code>, a target executable and an application bundle name.</li> <li><code>BUNDLE_ID</code>, which uniquely identifies the app throughout the system.</li> <li><code>TEAM_ID</code>, a unique identifier generated by Apple that's assigned to your team.</li> </ul> <p>To configure the <code>APP_NAME</code> option, open <code>Config.xcconfig</code> in any text editor before opening the project in Android Studio, and then set the desired name.</p> <p>If you need to change this option after you open the project in Android Studio, do the following:</p> <ol> <li>Close the project in Android Studio.</li> <li>Run <code>./cleanup.sh</code> in your terminal.</li> <li>Change the setting.</li> <li>Open the project in Android Studio again.</li> </ol> <p>To configure advanced settings, use Xcode. After opening the project in Android Studio, open the <code>iosApp/iosApp.xcworkspace</code> file in Xcode and make changes there.</p>"},{"location":"setup/running/","title":"Run your application","text":"<p>Info</p> <p>This documentation is a copy of the Jetpack Compose Multiplatform documentation.</p>"},{"location":"setup/running/#on-android","title":"On Android","text":"<p>To run your application on an Android emulator:</p> <ol> <li>Ensure you have an Android virtual device available.    Otherwise, create one.</li> <li>In the list of run configurations, select <code>androidApp</code>.</li> <li>Choose your virtual device and click Run.</li> </ol> Alternatively, use Gradle <p>To install an Android application on a real Android device or an emulator, run <code>./gradlew installDebug</code> in the terminal.</p>"},{"location":"setup/running/#on-ios","title":"On iOS","text":""},{"location":"setup/running/#running-on-a-simulator","title":"Running on a simulator","text":"<p>To run your application on an iOS simulator in Android Studio, modify the <code>iosApp</code> run configuration:</p> <ol> <li>In the list of run configurations, select Edit Configurations.</li> <li>Navigate to iOS Application | iosApp.</li> <li>In the Execution target list, select your target device. Click OK:</li> <li>The <code>iosApp</code> run configuration is now available. Click Run next to your virtual device.</li> </ol>"},{"location":"setup/running/#running-on-a-real-device","title":"Running on a real device","text":"<p>You can run your Compose Multiplatform application on a real iOS device for free. To do so, you'll need the following:</p> <ul> <li>The <code>TEAM_ID</code> associated with your Apple ID</li> <li>The iOS device registered in Xcode</li> </ul> <p>Note Before you continue, we suggest creating a simple \"Hello, world!\" project in Xcode to ensure you can successfully run apps on your device. You can follow the instructions below or watch this Stanford CS193P lecture recording.</p>"},{"location":"setup/running/#how-to-create-and-run-a-simple-project-in-xcode","title":"How to create and run a simple project in Xcode","text":"<ol> <li>On the Xcode welcome screen, select Create a new project in Xcode.</li> <li>On the iOS tab, choose the App template. Click Next.</li> <li>Specify the product name and keep other settings default. Click Next.</li> <li>Select where to store the project on your computer and click Create.    You'll see an app that displays \"Hello, world!\" on the device screen.</li> <li>At the top of your Xcode screen, click on the device name near the Run button.</li> <li>Plug your device into the computer. You'll see this device in the list of run options.</li> <li>Choose your device and click Run.</li> </ol>"},{"location":"setup/running/#finding-your-team-id","title":"Finding your Team ID","text":"<p>In the terminal, run <code>kdoctor --team-ids</code> to find your Team ID. KDoctor will list all Team IDs currently configured on your system, for example:</p> <pre><code>3ABC246XYZ (Max Sample)\nZABCW6SXYZ (SampleTech Inc.)\n</code></pre>"},{"location":"setup/running/#alternative-way-to-find-your-team-id","title":"Alternative way to find your Team ID","text":"<p>If KDoctor doesn't work for you, try this alternative method:</p> <ol> <li>In Android Studio, run the <code>iosApp</code> configuration with the selected real device. The build should fail.</li> <li>Go to Xcode and select Open a project or file.</li> <li>Navigate to the <code>iosApp/iosApp.xcworkspace</code> file of your project.</li> <li>In the left-hand menu, select <code>iosApp</code>.</li> <li>Navigate to Signing &amp; Capabilities.</li> <li>In the Team list, select your team.</li> </ol>"},{"location":"setup/running/#set-up-your-team-id","title":"Set up your Team ID","text":"<p>If you haven't set up your team yet, use the Add account option and follow the steps.</p> <p>To run the application, set the <code>TEAM_ID</code>:</p> <ol> <li>In the template, navigate to the <code>iosApp/Configuration/Config.xcconfig</code> file.</li> <li>Set your <code>TEAM_ID</code>.</li> <li>Re-open the project in Android Studio. It should show the registered iOS device in the <code>iosApp</code> run configuration.</li> </ol>"},{"location":"setup/setup/","title":"Environment Setup","text":"<p>Info</p> <p>This documentation is a copy of the Jetpack Compose Multiplatform documentation.</p>"},{"location":"setup/setup/#prerequisites","title":"Prerequisites","text":"<p>Warning</p> <p>You need a Mac with macOS to write and run iOS-specific code on simulated or real devices. This is an Apple requirement.</p> <p>To work with Compose Multiplatform, you need the following:</p> <ul> <li>A machine running a recent version of macOS</li> <li>Xcode</li> <li>Android Studio<ul> <li>The Kotlin Multiplatform Mobile plugin</li> <li>AS plugin: Compose Multiplatform IDE Support (doesn't hurt)</li> <li>AS plugin: SQLDelight (doesn't hurt)</li> </ul> </li> <li>The CocoaPods dependency manager</li> </ul> <p>Note</p> <p>So far cocoa pods was not needed for this project. Cocoapods requires ruby and ruby has a bit more complicated setup on apple silicon macs. KDoctor helps with the installation.</p>"},{"location":"setup/setup/#environment-check-kdoctor","title":"Environment Check - KDoctor","text":"<p>With the KDoctor tool, you can check whether your development environment is configured correctly.</p> <ol> <li> <p>Install KDoctor with Homebrew:</p> <pre><code>brew install kdoctor\n</code></pre> </li> <li> <p>Run KDoctor in your terminal:</p> <pre><code>kdoctor\n</code></pre> </li> </ol> <p>If everything is set up correctly, you'll see valid output:</p> <pre><code>Environment diagnose (to see all details, use -v option):\n[\u2713] Operation System\n[\u2713] Java\n[\u2713] Android Studio\n[\u2713] Xcode\n[\u2713] Cocoapods\n\nConclusion:\n  \u2713 Your system is ready for Kotlin Multiplatform Mobile development!\n</code></pre> <p>Otherwise, KDoctor will highlight which parts of your setup still need to be configured and will suggest a way to fix them.</p>"},{"location":"setup/structure/","title":"Project Structure","text":"<p>Info</p> <p>This documentation is a copy of the Jetpack Compose Multiplatform documentation.</p> <p>Open the project in Android Studio and switch the view from Android to Project to see all the files and targets belonging to the project.</p> <p>Your Compose Multiplatform project includes 3 modules:</p>"},{"location":"setup/structure/#shared","title":"shared","text":"<p>This is a Kotlin module that contains the logic common for both Android and iOS applications, that is, the code you share between platforms.</p> <p>This <code>shared</code> module is also where you\u2019ll write your Compose Multiplatform code. In <code>shared/src/commonMain/kotlin/App.kt</code>, you can find the shared root <code>@Composable</code> function for your app.</p> <p>It uses Gradle as the build system. You can add dependencies and change settings in <code>shared/build.gradle.kts</code>. The <code>shared</code> module builds into an Android library and an iOS framework.</p>"},{"location":"setup/structure/#androidapp","title":"androidApp","text":"<p>This is a Kotlin module that builds into an Android application. It uses Gradle as the build system. The <code>androidApp</code> module depends on and uses the <code>shared</code> module as a regular Android library.</p>"},{"location":"setup/structure/#iosapp","title":"iosApp","text":"<p>This is an Xcode project that builds into an iOS application. It depends on and uses the <code>shared</code> module as a CocoaPods dependency.</p>"},{"location":"tooling/","title":"Project Tooling Overview","text":"<p>This project incorporates a variety of tools streamline the development process, maintaining code quality, and ensuring consistency.</p>"},{"location":"tooling/#documentation","title":"Documentation","text":"<p>MkDocs, a static site generator, is used for creating and maintaining the project's documentation. It transforms Markdown files into a user-friendly HTML website.</p>"},{"location":"tooling/#linting","title":"Linting","text":"<p>Linting is implemented to enforce code quality and consistency across the project. It aids in detecting errors, enforcing code conventions, and preventing potential bugs.</p>"},{"location":"tooling/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<p>GitHub Actions are used for Continuous Integration, which includes building the application and deploying the documentation website. This ensures seamless integration of changes into the existing codebase and keeps the live documentation updated.</p>"},{"location":"tooling/#dependency-management","title":"Dependency Management","text":"<p>The project utilizes Gradle's dependency locking and version catalog for managing dependencies, ensuring consistent versions and preventing unintentional updates. A custom setup is also in place which identifies new versions of dependencies, updates them, and formats the version catalog.</p>"},{"location":"tooling/ci/","title":"Continuous Integration","text":"<p>Continuous Integration (CI) is a practice that involves developers integrating code into a shared repository several times a day. Each integration is then verified by an automated build and automated tests. This approach allows teams to detect problems early and solve them more easily.</p> <p>For this purpose, GitHub Actions are used.</p>"},{"location":"tooling/ci/#github-actions","title":"GitHub Actions","text":"<p>GitHub Actions is a CI/CD tool that allows developers to automate software workflows directly in GitHub repositories. The workflows you design are completely customizable and can be set up to take care of a variety of tasks including testing your projects, diagnosing bugs, managing issues, and deploying applications. Relying on GitHub Actions for your project's continuous integration can simplify your workflow, increase productivity and reduce overhead managing multiple tools.</p> <ul> <li> <p>Actions are defined in the <code>.github/workflows/</code> directory, with each file in this path representing a separate GitHub Action.</p> </li> <li> <p>With a free account, GitHub Actions provides 2000 minutes of CI runtime per month for private repositories. Public repositories do not   have this limit.</p> </li> <li> <p>GitHub Actions provides runners for macOS, Windows, and Linux, which means you can test your application across different operating   systems within a single pipeline. Potentially the macOS runner could be used to build iOS apps. However there is a minutes multiplier for   macOS runners that are 10x more expensive than Linux runners.</p> </li> <li> <p>GitHub Actions workflows can be intentionally skipped for specific commits by appending <code>[skip ci]</code> or <code>[ci skip]</code> to your commit   messages. However, this does not apply to PR titles.</p> </li> </ul>"},{"location":"tooling/ci/#testing-github-actions","title":"Testing GitHub Actions","text":"<p>You don\u2019t need to test or tweak your workflows in your main branch. You can modify your GitHub Actions to only be triggered on push events for a specific branch.</p> <pre><code>on:\n  push:\n    branches:\n      - test-actions\n</code></pre> <p>In the above snippet, the workflow will only run when changes are pushed to the <code>test-actions</code> branch.</p>"},{"location":"tooling/documentation/","title":"Project Documentation","text":"<p>This project documentation is created using MkDocs, a static site generator that turns Markdown files into a user-friendly HTML website.</p> <p>I've have chosen the Material for MkDocs theme, enhancing our documentation's aesthetics and usability. This theme incorporates features such as a searchable site, responsive layouts, customizable navigation, and a dark mode, striving to deliver an optimal user experience.</p>"},{"location":"tooling/documentation/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/         # The documentation directory.\n</code></pre>"},{"location":"tooling/documentation/#publishing","title":"Publishing","text":"<p>There is a GitHub action that automatically publishes the website. For local testing and review, install MkDocs on your local machine.</p>"},{"location":"tooling/documentation/#local-installation","title":"Local installation","text":"<p>Pre-requisites: Python 3.6 or higher and pip.</p> <p>Nice tutorial for installation: https://youtu.be/Q-YA_dA8C20</p> <p>Set up a virtual python environment and install MkDocs Material theme:</p> <pre><code>python3 -m venv venv\npip3 install mkdocs-material pillow cairosvg\n</code></pre>"},{"location":"tooling/documentation/#commands","title":"Commands","text":"<ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server. Needs a virtual environment.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs new .</code> - Create a new project in the current directory.</li> </ul>"},{"location":"tooling/documentation/#page-customization","title":"Page customization","text":"<pre><code>---\ntitle: Welcome\ndescription: Welcome to the Compose Kotlin Multiplatform Playground\nicon: simple/jetpackcompose\nhide: [ navigation, toc ]\n---\n</code></pre>"},{"location":"tooling/linting/","title":"Linting","text":"<p>Adding linting to a code project, with tools like Detekt for Kotlin, is crucial for ensuring consistent coding styles, improving code quality, and catching potential bugs early in the development process. Linting promotes collaboration within development teams by enforcing uniform coding conventions, enhancing code readability, and automating the identification of common issues during code reviews. Detekt, being Kotlin-specific, allows for customizable rules tailored to a project's needs, ensuring adherence to best practices and Kotlin-specific coding conventions. This leads to increased productivity, seamless integration into CI/CD pipelines, and ultimately results in more maintainable and reliable Kotlin projects.</p> <p> Plan is to set up a detekt (done) and ktlint (todo) integration with gradle.</p>"},{"location":"tooling/linting/#detekt","title":"Detekt","text":"<p>Linting is currently set up with detekt. The configuration is located in <code>detekt.yml</code>.</p> <p>Current issue is the set up of a convention plugin that can be applied to all modules. The current solution is to apply the plugin to the root project and run it on all files in the project. This is not ideal as it will run on all files in the project, including the build files. Therefor an exclusion for the <code>build</code> folder was added. Also detekt doesn't run with type resolution, which means that it can't find deeper issues related to the codebase. Have another go at it when detekt 2.0 is released. This should then have official support for type resolution.</p>"},{"location":"tooling/linting/#updating-detekt","title":"Updating detekt","text":"<ol> <li>Update detekt in <code>libs.versions.toml</code></li> <li>Delete <code>detekt.yml</code> in the root project</li> <li>Run <code>./gradlew detektGenerateConfig</code> in the root project</li> <li>Check the git diff for changes of the default detekt config</li> </ol> <p>More information about updating detekt can be found in the blog post: Recipe: diff your detekt config with the default one.</p>"},{"location":"tooling/linting/#plugins","title":"Plugins","text":"<p>Detekt has a plugin system to extend detekt with additional rulesets. The following plugins are currently used:</p> <ul> <li>https://github.com/appKODE/detekt-rules-compose</li> <li>https://mrmans0n.github.io/compose-rules/</li> <li>https://detekt.dev/docs/next/rules/formatting/</li> </ul>"},{"location":"tooling/dependencies/","title":"Dependency Management","text":"<p>Dependency Management is a crucial part of any software project. It is important to keep track of the dependencies used in a project and to ensure that they are up to date. This project uses Gradle to manage dependencies.</p> <p>To make life easier, this project uses dependency locking and gradle version catalog to help manage dependencies and keep them up to date.</p>"},{"location":"tooling/dependencies/dependency-locking/","title":"Gradle Dependency Locking","text":""},{"location":"tooling/dependencies/dependency-locking/#overview","title":"Overview","text":"<p>Gradle dependency locking is a feature that ensures the version of project dependencies are fixed and cannot be changed by the Gradle dependency resolution process. This mechanism aims to increase the reliability and consistency of the build process by preventing unexpected changes in dependencies.</p> <p>The application of Gradle dependency locking not only enforces the consistency of the build process but also provides a way to manage dependencies in a more controlled manner.</p> <p>More details about this feature can be found in the official Gradle Dependency Locking documentation.</p>"},{"location":"tooling/dependencies/dependency-locking/#unlocking-dependencies","title":"Unlocking Dependencies","text":"<p>In certain scenarios, such as when a specific dependency needs to be updated, dependencies can be unlocked. To unlock the dependencies, a provided shell script <code>./scripts/unlock_gradle_dependencies.sh</code> can be used.</p> <p>Once a dependency is updated, the changes will be reflected in the git diff. This way, it is easy to track what has changed during the update.</p>"},{"location":"tooling/dependencies/dependency-locking/#known-issues","title":"Known Issues","text":"<p>Please note that the generation of a <code>settings-gradle.lockfile</code> appears to be a bug. More information on this issue can be found here: Gradle Issue #21101.</p>"},{"location":"tooling/dependencies/dependency-locking/#strict-mode","title":"Strict mode","text":"<p>Dependency locking strict mode doesn't work well with the automatic dependency version update plugin. The dependency version plugin can only check for newer versions of the dependencies if the dependency version is not locked. Therefore all lock files need to be removed, but if strict mode is enabled building without a present lockfile will fail.</p>"},{"location":"tooling/dependencies/version-catalog/","title":"Gradle Version Catalog","text":"<p>The Gradle version catalog is a feature that lets you centralize the dependencies of your project in a single place. This can improve readability and maintainability of build scripts by reducing duplication of dependency coordinates.</p>"},{"location":"tooling/dependencies/version-catalog/#dependency-updates","title":"Dependency Updates","text":"<p>There is a custom Gradle plugin in place to identify new versions of dependencies, update them, and format the version catalog. This plugin extends and configures two Gradle plugins:</p> <ul> <li>Ben Manes - gradle-version-plugin</li> <li>littlerobots - version-catalog-update-plugin</li> </ul>"},{"location":"tooling/dependencies/version-catalog/#tasks","title":"Tasks","text":"<p>These plugins provide multiple convenient tasks:</p>"},{"location":"tooling/dependencies/version-catalog/#formatting","title":"Formatting","text":"<p>To only format the version catalog file, use:</p> <pre><code>./gradlew versionCatalogFormat\n</code></pre>"},{"location":"tooling/dependencies/version-catalog/#interactive-update","title":"Interactive Update","text":"<p>To create a <code>libs.versions.updates.toml</code> file with the available versions of the dependencies, use:</p> <pre><code>./gradlew versionCatalogUpdate --interactive\n</code></pre> <p>Apply the changes to the version catalog file with:</p> <pre><code>./gradlew versionCatalogApplyUpdate\n</code></pre>"},{"location":"tooling/dependencies/version-catalog/#direct-update","title":"Direct Update","text":"<p>To directly update all dependencies in the version catalog file, use:</p> <pre><code>./gradlew versionCatalogUpdate\n</code></pre> <p>These tasks make it easy to maintain and update the version catalog, ensuring your dependencies are always up to date.</p>"}]}